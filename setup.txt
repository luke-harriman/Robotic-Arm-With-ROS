1. Download Ubuntu 22.04 from the UTM gallery:
    - https://mac.getutm.app/gallery/ubuntu-20-04
2. Open up terminal in ubuntu and run the following commands:
    - Update package list
        - sudo apt update
    - Install Dependencies:
        - sudo apt install -y build-essential libseccomp-dev pkg-config squashfs-tools cryptsetup
    - Install Go (required for Singularity):
        - wget https://golang.org/dl/go1.21.10.linux-arm64.tar.gz
        - sudo tar -C /usr/local -xzf go1.21.10.linux-arm64.tar.gz
        - echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc
        - source ~/.bashrc
    - Download and install Singularity
        - wget https://github.com/sylabs/singularity/releases/download/v4.1.3/singularity-ce-4.1.3.tar.gz
        - tar -xzf singularity-ce-4.1.3.tar.gz
        - cd singularity-ce-4.1.3
        - ./mconfig
        - make -C builddir
        - sudo make -C builddir install       
3. Firefox (Web browser) may not be accissible straight away. If so, run the following:
    - sudo apt install snapd
    - sudo systemctl enable snapd
    - sudo systemctl start snapd
    - sudo systemctl enable apparmor
    - sudo systemctl start apparmor
    - sudo snap remove firefox
    - sudo snap install firefox
4. Download ROS for Ubuntu Jammy (22.04). The download will need to be from source:
    - Set Locale
        - sudo apt install locales
        - sudo locale-gen en_US en_US.UTF-8
        - sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
        - export LANG=en_US.UTF-8
    - Add the ROS 2 APT Repository
        - sudo apt install software-properties-common
        - sudo add-apt-repository universe
        - sudo apt install curl -y
        - sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg    
    - Add the ROS 2 repository:
        - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null
    - Install dev tools:
        - sudo apt update && sudo apt install -y \
python3-flake8-docstrings \
python3-pip \
python3-pytest-cov \
ros-dev-tools \
python3-flake8-blind-except \
python3-flake8-builtins \
python3-flake8-class-newline \
python3-flake8-comprehensions \
python3-flake8-deprecated \
python3-flake8-import-order \
python3-flake8-quotes \
python3-pytest-repeat \
python3-pytest-rerunfailures
    - Get ROS 2 Code
        - mkdir -p ~/ros2_humble/src
        - cd ~/ros2_humble
        - vcs import --input https://raw.githubusercontent.com/ros2/ros2/humble/ros2.repos src
    - Install Dependencies Using rosdep
        - sudo rosdep init
        - rosdep update
        - rosdep install --from-paths src --ignore-src -y --skip-keys "fastcdr rti-connext-dds-6.0.1 urdfdom_headers"
    - Build the Code in the Workspace
        - cd ~/ros2_humble/
        - colcon build --symlink-install
        - (Note: There may be missing dependencies. If so, run rosdep install --from-paths src --ignore-src -r -y)
5. Environment Setup
    - Source the Setup Script (Run in different terminal)
        - source ~/ros2_humble/install/local_setup.bash 
    - Try Some Examples - Run a Python listener in another terminal:
        - source ~/ros2_humble/install/local_setup.bash
        - ros2 run demo_nodes_py listener

Extra Packages
    - sudo apt-get install ros-humble-ros2-controllers
    - sudo apt install ros-humble-desktop-full

Extra Usage Notes:
    - Searching for packages: dpkg -l | grep python3-colcon-common-extensions

Process for running ros2 code:
    1. Make sure you have two terminals open. 
    2. Once you have run `colcon build` on the folder, run `cd src`. 
    3. Create a ros2 package using a command like: ros2 pkg create --build-type ament-python bumperbot_py_examples
        - `ros2 pkg create` creates the ros2 package. 
        - `--build-type ament-python` specifies the package language as python. 
        - `bumperbot_py_examples` specifies the file name. 
    4. Go back to workspace root folder (i.e ros2_humble) and run `colcon build` again with the new package. 
    5. The workspace needs to be activated to be recognised as a ros 2 overlay. This way, all the packages - included the new one created - will be recognised as ros 2 packages. 
    6. Move to the second terminal to complete the source command - this is best practice. 
        - source ~/ros2_humble/install/setup.bash
    7. The terminal window and you used to source the setup.bash file now recognises the packages you have created. 
    8. Run `ros2 pkg list` to confirm that ros2 recongises your newly created packages. 
    

